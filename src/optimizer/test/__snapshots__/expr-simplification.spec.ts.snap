// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expression-simplification should fail expression simplification for interpreter-called-when-no-contract 1`] = `
"<unknown>:10:12: Cannot evaluate expression to a constant: divisor expression must be non-zero
   9 | fun test() {
> 10 |     blowup(0);   // Interpreter will execute this call and inform of a division by zero.
                  ^
  11 | }
"
`;

exports[`expression-simplification should pass expression simplification for interpreter-simplifies-when-no-contract 1`] = `
[
  [
    "v",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "v + 10",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "v + 10 + 3",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "7",
    "Int",
  ],
  [
    "3 + 7",
    "Int",
  ],
  [
    "A {a: v + 10 + 3, b: 3 + 7}",
    "A",
  ],
  [
    "s",
    "A",
  ],
  [
    "true",
    "Bool",
  ],
  [
    "B {nested: s, c: true}",
    "B",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exprFun1(0)",
    "A",
  ],
  [
    "exprFun1(0).a",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "exprFun1(2)",
    "A",
  ],
  [
    "exprFun2(exprFun1(2))",
    "B",
  ],
  [
    "1",
    "Int",
  ],
  [
    "exprFun1(1)",
    "A",
  ],
  [
    "exprFun2(exprFun1(1))",
    "B",
  ],
  [
    "exprFun2(exprFun1(1)).nested",
    "A",
  ],
  [
    "2",
    "Int",
  ],
  [
    "exprFun1(2)",
    "A",
  ],
  [
    "exprFun2(exprFun1(2))",
    "B",
  ],
  [
    "exprFun2(exprFun1(2)).c",
    "Bool",
  ],
  [
    "c1",
    "Int",
  ],
  [
    "exprFun1(c1)",
    "A",
  ],
  [
    "exprFun1(c1).a",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "exprFun1(c1).a > 0",
    "Bool",
  ],
  [
    "exprFun2(exprFun1(2)).c || exprFun1(c1).a > 0",
    "Bool",
  ],
  [
    "v + 10",
    "Int",
  ],
  [
    "v + 10 + 3",
    "Int",
  ],
  [
    "3 + 7",
    "Int",
  ],
  [
    "A {a: v + 10 + 3, b: 3 + 7}",
    "A",
  ],
  [
    "B {nested: s, c: true}",
    "B",
  ],
  [
    "exprFun1(0)",
    "A",
  ],
  [
    "exprFun1(0).a",
    "Int",
  ],
  [
    "exprFun1(2)",
    "A",
  ],
  [
    "exprFun2(exprFun1(2))",
    "B",
  ],
  [
    "exprFun1(1)",
    "A",
  ],
  [
    "exprFun2(exprFun1(1))",
    "B",
  ],
  [
    "exprFun2(exprFun1(1)).nested",
    "A",
  ],
  [
    "exprFun1(2)",
    "A",
  ],
  [
    "exprFun2(exprFun1(2))",
    "B",
  ],
  [
    "exprFun2(exprFun1(2)).c",
    "Bool",
  ],
  [
    "exprFun1(c1)",
    "A",
  ],
  [
    "exprFun1(c1).a",
    "Int",
  ],
  [
    "exprFun1(c1).a > 0",
    "Bool",
  ],
  [
    "exprFun2(exprFun1(2)).c || exprFun1(c1).a > 0",
    "Bool",
  ],
  [
    "3 + 7",
    "Int",
  ],
  [
    "v + 10 + 3",
    "Int",
  ],
  [
    "B {nested: s, c: true}",
    "B",
  ],
  [
    "A {a: v + 10 + 3, b: 3 + 7}",
    "A",
  ],
  [
    "v + 10 + 3",
    "Int",
  ],
  [
    "3 + 7",
    "Int",
  ],
  [
    "A {a: v + 10 + 3, b: 3 + 7}",
    "A",
  ],
  [
    "v + 10 + 3",
    "Int",
  ],
  [
    "3 + 7",
    "Int",
  ],
]
`;
